version: '3.1'
services:
  order-server:
    container_name: order-server
    build:
      dockerfile: order-server/Dockerfile
    image: order-server:latest
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: deploy
    ports:
      - ":8080"
    depends_on:
      - kafka
    networks:
      - kafka_network

  payment-server:
    container_name: payment-server
    build:
      dockerfile: payment-server/Dockerfile
    image: payment-server:latest
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVER: kafka:9092
      SPRING_PROFILES_ACTIVE: deploy
    ports:
      - ":8081"
    depends_on:
      - kafka
      - order-server
    networks:
      - kafka_network

  delivery-server:
    container_name: delivery-server
    build:
      dockerfile: delivery-server/Dockerfile
    image: delivery-server:latest
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVER: kafka:9092
      SPRING_PROFILES_ACTIVE: deploy
    ports:
      - ":8082"
    depends_on:
      - kafka
      - payment-server
    networks:
      - kafka_network



  mongo1:
    image: mongo:4.4.3
    container_name: mongo1
    volumes:
      - ./mongod.conf:/etc/mongod.conf
    expose:
      - 27017
    ports:
      - 27017:27017
    command: mongod --config /etc/mongod.conf --replSet my-mongo-set
    networks:
      - kafka_network

  mongo2:
    container_name: mongo2
    image: mongo:4.4.3
    volumes:
      - ./mongod.conf:/etc/mongod.conf
    expose:
      - 27017
    ports:
      - 27018:27017
    command: mongod --config /etc/mongod.conf --replSet my-mongo-set
    networks:
      - kafka_network



  mongoinit:
    image: mongo:4.4.3
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongo1
      - mongo2
    networks:
      - kafka_network
    command: >
      bash -c "sleep 10 && mongo --host mongo1:27017  admin --eval '
      config = {
        \"_id\": \"my-mongo-set\",
        \"members\": [
          {\"_id\": 0, \"host\": \"mongo1:27017\"},
          {\"_id\": 1, \"host\": \"mongo2:27017\"}
        ]
      };
      rs.initiate(config);
      while (!rs.isMaster().ismaster) {
        sleep(1000);
      }
      '"

  mongopostinit:
    image: mongo:4.4.3
    depends_on:
      - mongoinit
    command: >
      bash -c "sleep 30  && mongo --host mongo2:27017 admin --eval 'db.getMongo().setSecondaryOk(true)' "


  db:
    image: 'postgres:13.1-alpine'
    container_name: db
    environment:
      - POSTGRES_USER=markeugene
      - POSTGRES_PASSWORD=markeugene
      - POSTGRES_HOST=localhost
      - POSTGRES_DB=edd
    ports:
      - 5432:5432

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - ":2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    networks:
      - kafka_network


  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - ":9092"
    restart: always
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge


